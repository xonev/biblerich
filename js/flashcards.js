// Generated by CoffeeScript 2.0.0-beta7
void function () {
  var CardView, Flashcards, NavigationView, Router;
  window.Flashcards = Flashcards = {
    init: function (pageUrl, options, cardData) {
      var router;
      if (null == options)
        options = {};
      if (null == cardData)
        cardData = null;
      if (_.isArray(options)) {
        cardData = options;
        options = {};
      }
      router = new Flashcards.Router({
        cardData: cardData,
        cardOptions: options
      });
      Backbone.history.start({ root: pageUrl });
      return router.start();
    }
  };
  Flashcards.Router = Router = function (super$) {
    extends$(Router, super$);
    function Router() {
      super$.apply(this, arguments);
    }
    Router.prototype.routes = { 'card/:id': 'showCard' };
    Router.prototype.initialize = function (param$) {
      var cache$, cardData, cardOptions;
      {
        cache$ = param$;
        cardData = cache$.cardData;
        cardOptions = cache$.cardOptions;
      }
      this.numCards = cardData.length;
      this.ids = function () {
        var accum$;
        accum$ = [];
        for (var i$ = 1; 1 <= this.numCards ? i$ <= this.numCards : i$ >= this.numCards; 1 <= this.numCards ? ++i$ : --i$)
          accum$.push(i$);
        return accum$;
      }.apply(this, arguments);
      this.navigationView = new NavigationView({
        cardData: cardData,
        imageFirst: !!cardOptions.imageFirst,
        el: document.getElementById('flashcards')
      });
      this.navigationView.on('previous', function (this$) {
        return function () {
          return this$.changeRoute(-1);
        };
      }(this));
      this.navigationView.on('next', function (this$) {
        return function () {
          return this$.changeRoute(1);
        };
      }(this));
      return this.navigationView.on('shuffle', function (this$) {
        return function () {
          return this$.ids = _.shuffle(this$.ids);
        };
      }(this));
    };
    Router.prototype.showCard = function (id) {
      this.index = _.indexOf(this.ids, parseInt(id));
      return this.navigationView.show(this.ids[this.index] - 1);
    };
    Router.prototype.changeRoute = function (amount) {
      var newIndex;
      newIndex = this.index + amount;
      newIndex = newIndex >= 0 ? newIndex : newIndex % this.numCards + this.numCards;
      this.index = newIndex % this.numCards;
      return this.navigate('card/' + this.ids[this.index], { trigger: true });
    };
    Router.prototype.start = function () {
      return this.firstCard();
    };
    Router.prototype.firstCard = function () {
      return this.navigate('card/1', { trigger: true });
    };
    return Router;
  }(Backbone.Router);
  Flashcards.NavigationView = NavigationView = function (super$) {
    extends$(NavigationView, super$);
    function NavigationView() {
      super$.apply(this, arguments);
    }
    NavigationView.prototype.cardViews = [];
    NavigationView.prototype.events = {
      'click .prev': 'previous',
      'click .next': 'next',
      'click .flip': 'flip',
      'click .shuffle': 'shuffle'
    };
    NavigationView.prototype.initialize = function (param$) {
      var cache$;
      {
        cache$ = param$;
        this.cardData = cache$.cardData;
        this.imageFirst = cache$.imageFirst;
      }
    };
    NavigationView.prototype.previous = function () {
      return this.trigger('previous');
    };
    NavigationView.prototype.next = function () {
      return this.trigger('next');
    };
    NavigationView.prototype.flip = function () {
      if (null != this.view)
        return this.view.toggle();
    };
    NavigationView.prototype.shuffle = function () {
      return this.trigger('shuffle');
    };
    NavigationView.prototype.show = function (index) {
      if (null != this.view)
        this.view.remove();
      if (this.cardViews[index]) {
        this.view = this.cardViews[index];
      } else if (this.cardData.length > index) {
        this.view = this.cardViews[index] = new CardView(this.cardData[index], this.imageFirst);
      }
      return this.$el.prepend(this.view.render());
    };
    return NavigationView;
  }(Backbone.View);
  Flashcards.CardView = CardView = function (super$) {
    extends$(CardView, super$);
    function CardView() {
      var instance$;
      instance$ = this;
      this.toggle = function () {
        return CardView.prototype.toggle.apply(instance$, arguments);
      };
      super$.apply(this, arguments);
    }
    CardView.prototype.className = 'card';
    CardView.prototype.events = { click: 'toggle' };
    CardView.prototype.initialize = function (data, param$) {
      if (null == param$)
        param$ = false;
      this.frontFirst = param$;
      this.back = this.buildBack(data);
      this.front = this.buildFront(data);
      this.showingFront = this.frontFirst;
      return this.$el.append(this.getNotShown(!this.showingFront));
    };
    CardView.prototype.buildBack = function (data) {
      if (data.text) {
        return $('<div>' + data.text + '</div>');
      } else if (data.front) {
        return $('<div>' + data.front + '</div>');
      } else {
        throw new Error('No data for the front of the card.');
      }
    };
    CardView.prototype.buildFront = function (data) {
      if (data.img) {
        return $("<img src='/img/flashcards/" + data.img + "' alt='click to see other side'></img>");
      } else if (data.back) {
        return $('<div>' + data.back + '</div>');
      } else {
        throw new Error('No data for the back of the card.');
      }
    };
    CardView.prototype.getNotShown = function (showingFront) {
      if (showingFront) {
        return this.back;
      } else {
        return this.front;
      }
    };
    CardView.prototype.getDirection = function (showingFront) {
      if (showingFront) {
        return 'rl';
      } else {
        return 'lr';
      }
    };
    CardView.prototype.toggle = function () {
      this.$el.flip({
        direction: this.getDirection(this.showingFront),
        speed: 200,
        content: this.getNotShown(this.showingFront)[0],
        color: 'white'
      });
      return this.showingFront = !this.showingFront;
    };
    CardView.prototype.render = function () {
      return this.el;
    };
    CardView.prototype.remove = function () {
      return this.$el.detach();
    };
    return CardView;
  }(Backbone.View);
  function isOwn$(o, p) {
    return {}.hasOwnProperty.call(o, p);
  }
  function extends$(child, parent) {
    for (var key in parent)
      if (isOwn$(parent, key))
        child[key] = parent[key];
    function ctor() {
      this.constructor = child;
    }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor;
    child.__super__ = parent.prototype;
    return child;
  }
}.call(this);
